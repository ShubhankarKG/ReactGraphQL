{"version":3,"sources":["components/launchItem.js","components/missionKey.js","components/launches.js","launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloCLient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.21981dd9.chunk.js","sourcesContent":["import React from 'react'\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\nfunction LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success} }) {\n  \n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4 >Mission: <span className={classNames({\n            'text-success': launch_success,\n            'text-danger': !launch_success\n          })}>{mission_name}</span></h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p> <p>  <span className=\"px-3 mr-2 bg-danger\" /> = Failed\n      </p>\n    </div>\n  )\n}\n","import React, {Fragment} from 'react';\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./launchItem\";\nimport MissionKey from \"./missionKey\";\n\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nfunction Launches() {\n  return (\n    <Fragment>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      <MissionKey />\n      <Query query={LAUNCHES_QUERY}>\n        {\n          ({ loading, error, data }) => {\n            if(loading) return <h4>Loading...</h4>\n            if(error) console.log(error);\n            \n            return <Fragment>\n              {\n                data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch}/>\n                ))\n              }\n            </Fragment>\n          }\n        }\n      </Query>\n    </Fragment>\n  )\n}\n\nexport default Launches\n","import React, { Fragment } from 'react'\nimport gql from \"graphql-tag\";\nimport {Query} from \"react-apollo\";\nimport {Link} from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local,\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default function Launch(props) {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n\n  return (\n    <Fragment>\n      <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n        {\n          ({ loading, error, data }) => {\n            if(loading) return <h4>Loading...</h4>\n            if(error) console.log(error);\n            const { mission_name, flight_number, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\n            return <div>\n              <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission: </span>{mission_name}</h1>\n              <h4 className=\"mb-3\">Launch details</h4>\n              <ul className=\"list-group-item\">\n                <li className=\"list-group-item\">\n                  Flight Number : {flight_number}\n                </li>\n                <li className=\"list-group-item\">\n                  Launch Year : {launch_year}\n                </li>\n                <li className=\"list-group-item\">\n                  Launch Success : <span className={classNames({\n                    'text-success' : launch_success,\n                    'text-danger' : !launch_success\n                  })}>{launch_success ? \"Yes\" : \"No\"}</span>\n                </li>\n              </ul>\n              <h4 className=\"my-3\">Rocket details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID : {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name : {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type : {rocket_type}</li>\n              </ul>\n              <hr />\n              <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n            </div>\n          }\n        }\n      </Query>\n    </Fragment>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport ApolloCLient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Launches from \"./components/launches\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Launch from \"./launch\";\n\nconst client = new ApolloCLient({\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <h1>SpaceX</h1>\n        </div>\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}